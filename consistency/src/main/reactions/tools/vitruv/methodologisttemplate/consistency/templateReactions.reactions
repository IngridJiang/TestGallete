
import "http://vitruv.tools/reactionsparser/model" as ascet
import "http://vitruv.tools/reactionsparser/model2" as amalthea

reactions: amalthea2ascet
in reaction to changes in amalthea
execute actions in ascet

// insert a System, which is the root element of model, into an instance of model
// as a reaction, an element of type Root should be created, persisted relatively, 
// and a correspondence should be added (see the called routine)
reaction ComponentContainerInsertedAsRoot {
	after element amalthea::ComponentContainer inserted as root
  // newValue refers to the newly inserted element of type System (provided by the reactions runtime environment at runtime)
	call createAndRegisterRootComponentContainer(newValue)
}

routine createAndRegisterRootComponentContainer(amalthea::ComponentContainer componentContainer) {
	match {
    // we do only want to create a new corresponding Root if we not have one already and the old one has, e.g., only been moved
		require absence of ascet::AscetModule corresponding to componentContainer
	}
  create {
    // short way of using the respective Factory calls, which would be used in the update-block
    val mRoot = new ascet::AscetModule
  }
	update {
    // save the newly created AscetModule element at the specified location
    //    persistProjectRelative(componentContainer, mRoot, new File("").toString() + "example.model2")
	      persistProjectRelative(componentContainer, mRoot,  "example.model2")
    // register the correspondence so we can find mRoot later, if we modify something in system and need to adapt mRoot accordingly
		addCorrespondenceBetween(componentContainer, mRoot)
	}
}


reaction TaskDeleted {
	after element amalthea::Task deleted
	call deleteTask(affectedEObject)
}

routine deleteTask (amalthea::Task task){
	match{
		val ascettask = retrieve ascet::Task corresponding to task
	}
	update{
        if (ascettask !== null) {
			removeObject(ascettask)
			removeCorrespondenceBetween(task, ascettask)
		}     
	}
	
}

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
		call createAscetTask(newValue,affectedEObject)
}

routine createAscetTask(amalthea::Task task, amalthea::ComponentContainer container){
	update {
		val String userMsg = "A Task has been created. Please decide whether and which corresponding ASCET Task should be created."

        val interruptTaskOption = "Create InterruptTask"
        val periodicTaskOption = "Create PeriodicTask"
        val softwareTaskOption = "Create SoftwareTask"
        val timeTableTaskOption = "Create TimeTableTask"   
        val doNothingOption = "Decide Later"

        val String[] options = #[
            interruptTaskOption,
            periodicTaskOption,
            softwareTaskOption,
            timeTableTaskOption,
            doNothingOption
        ]

        val Integer selected = userInteractor
        .singleSelectionDialogBuilder
        .message(userMsg)
        .choices(options)
        .startInteraction()

    
        switch (selected) {
            case 0: {
                createInterruptTask(task,container)               
            }
            case 1: {
                createPeriodicTask(task,container)
            }
            case 2: {
                createSoftwareTask(task,container)
            }
            case 3: {
                createTimeTableTask(task,container)
            }
            case 4: {
                // no action
            }
        }
		
	}
}

routine createInterruptTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::InterruptTask corresponding to task
		 
	}
	create {
		val interruptTask = new ascet::InterruptTask
	}
	update {
		AscetModule.tasks += interruptTask
		interruptTask.name = task.name
		addCorrespondenceBetween(interruptTask, container)
		
	}
}

routine createPeriodicTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::PeriodicTask corresponding to task
		 
	}
	create {
		val periodicTask = new ascet::PeriodicTask
	}
	update {
		AscetModule.tasks += periodicTask
		periodicTask.name = task.name
		addCorrespondenceBetween(periodicTask, container)
		
	}
}


routine createSoftwareTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::SoftwareTask corresponding to task
		 
	}
	create {
		val softwareTask = new ascet::SoftwareTask
	}
	update {
		AscetModule.tasks += softwareTask
		softwareTask.name = task.name
		addCorrespondenceBetween(softwareTask, container)
		
	}
}

routine createTimeTableTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::TimeTableTask corresponding to task
		 
	}
	create {
		val timeTableTask = new ascet::TimeTableTask
	}
	update {
		AscetModule.tasks += timeTableTask
		timeTableTask.name = task.name
		addCorrespondenceBetween(timeTableTask, container)
		
	}
}

